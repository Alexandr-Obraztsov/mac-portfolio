import { NextResponse } from 'next/server'

/**
 * API-—Ä–æ—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é —Ñ–æ—Ä–º—É –≤ Telegram
 */
export async function POST(request: Request) {
	try {
		const body = await request.json()
		const { name, email, company, message } = body

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
		if (!name || !email || !message) {
			return NextResponse.json(
				{
					success: false,
					message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è',
				},
				{ status: 400 }
			)
		}

		// Telegram Bot API
		const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
		const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID

		// –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
		if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
			return NextResponse.json(
				{ success: false, message: '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞' },
				{ status: 500 }
			)
		}

		// –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
		const text = `
üîî –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞:

üë§ –ò–º—è: ${name}
üìß Email: ${email}
üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${company || '-'}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${message}
`

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
		const telegramResponse = await fetch(
			`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
			{
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify({
					chat_id: TELEGRAM_CHAT_ID,
					text,
					parse_mode: 'HTML',
				}),
			}
		)

		const telegramData = await telegramResponse.json()

		if (!telegramResponse.ok) {
			console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', telegramData)
			return NextResponse.json(
				{ success: false, message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' },
				{ status: 500 }
			)
		}

		return NextResponse.json({
			success: true,
			message: '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
		})
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error)
		return NextResponse.json(
			{ success: false, message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
			{ status: 500 }
		)
	}
}
